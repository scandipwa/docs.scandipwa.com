{"componentChunkName":"component---src-templates-docs-js","path":"/docs/build-and-configuration.html","result":{"data":{"markdownRemark":{"html":"<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <div class=\"video\"> <iframe src=\"https://www.youtube.com/embed/DUmx_95V1Ps\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div> </div>\n<p>Topics covered in this tutorial:</p>\n<ol>\n<li><a href=\"#1-what-is-webpack\">What Is Webpack?</a> <br>\n1.1.\t<a href=\"#webpack-source-and-destination-folders\">webpack: Source And Destination Folders</a></li>\n<li><a href=\"#2-differences-between-production-and-development-set-up\">Differences Between Production And Development Set-Up</a> <br>\n2.1.\t<a href=\"#code-minification-and-splitting\">Code Minification And Splitting</a> <br>\n2.2.\t<a href=\"#the-manifest\">The Manifest</a> <br>\n2.3.\t<a href=\"#service-worker-pre-cache\">Service Worker Pre-cache</a> <br>\n2.4.\t<a href=\"#the-source-map\">The Source Map</a> <br>\n2.5.\t<a href=\"#the-hot-reload\">The Hot Reload</a> <br>\n2.6.\t<a href=\"#the-development-server\">The Development Server</a> <br>\n2.7.\t<a href=\"#the-html-entry-file\">The HTML Entry File</a> <br>\n2.8.\t<a href=\"#debugging-and-building\">Debugging And Building</a> <br></li>\n<li><a href=\"#3-the-config-folder\">The <code class=\"gatsby-code-text\">config</code> Folder</a> <br></li>\n<li><a href=\"#4-available-commands\">Available Commands</a> <br></li>\n</ol>\n<h2 id=\"1-what-is-webpack\"><a href=\"#1-what-is-webpack\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. What Is Webpack?</h2>\n<p>Webpack allows us to bundle a theme or an application. It’s run in the development set-up in order to create prioritized bundles of modules and files that will then be run as the application starts. </p>\n<p>The reason why we need to bundle our application is because assets like (images, styles, modules etc.) are not included by default. Furthermore, there are a number of features that are not unanimously supported by all browsers.</p>\n<p>For example, we can type:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"20484798167537922000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`import 'abc';\nimport 'react';`, `20484798167537922000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Keep in mind that the <code class=\"gatsby-code-text\">node_modules</code> folder is never shared, so we can’t access the exact <code class=\"gatsby-code-text\">&#39;react&#39;</code> file from there and we would not be able to open this file in a browser. </p>\n<p>If we try:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"93658399356007870000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`import 'style.scss';`, `93658399356007870000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> <span class=\"token string\">'style.scss'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The browser won’t understand the <code class=\"gatsby-code-text\">.scss</code> file, so we will need to transform it into a <code class=\"gatsby-code-text\">.css</code> file. The browser also doesn’t know what <code class=\"gatsby-code-text\">&#39;react&#39;</code> or the other modules are, so we need to include them into our script as well.</p>\n<p>Things like arrow functions <code class=\"gatsby-code-text\">( ) =&gt; {…}</code>, classes and class proposal properties (e.g., <code class=\"gatsby-code-text\">prop = 1;</code>) are not included by default or supported by most browsers, so we need to transform these features into a format that older browsers will understand. Simply put, if the code is written in ECMAScript5, we need to find a way to transform it into ES2015. </p>\n<p>Luckily, webpack has a different tool for each of these transformations.</p>\n<ul>\n<li><code class=\"gatsby-code-text\">webpack</code> in itself is responsible for handling the imports and their dependencies</li>\n<li><code class=\"gatsby-code-text\">babel-loader</code> – helps you compile code from newer versions of JavaScript down to a version that will be supported by your environment</li>\n<li><code class=\"gatsby-code-text\">sass-loader</code> – transforms the more easily maintainable .scss files to .css files</li>\n</ul>\n<p>So, what are these loaders? Loaders are webpack features that allow you to load a specific type of asset.</p>\n<p>Let’s look at a simple CSS flexbox example, using the shorthand <code class=\"gatsby-code-text\">flex</code>, which combines <code class=\"gatsby-code-text\">flex-grow</code>, <code class=\"gatsby-code-text\">flex-shrink</code> and <code class=\"gatsby-code-text\">flex-basis</code>:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"44459756202256220000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`flex: 101;`, `44459756202256220000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">flex: 101;</code></pre></div>\n<p>Due to the fact that not all browsers support the shorthand properties of <code class=\"gatsby-code-text\">flex</code>, we need to add certain vendor prefixes to it, in order to make our code render the same way in different browsers. The prefixes are as follows <code class=\"gatsby-code-text\">-webkit</code> for Chrome and Safari, <code class=\"gatsby-code-text\">-moz</code> for Firefox, <code class=\"gatsby-code-text\">-o</code> for Opera and <code class=\"gatsby-code-text\">-ms</code> for Internet Explorer.</p>\n<p>Fortunately, webpack has a <code class=\"gatsby-code-text\">postcss-loader</code>, which will do this for you using the <code class=\"gatsby-code-text\">autoprefixer</code> plug-in. So, the processed code will look something like this:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"21210630627687180000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`…\n-webkit-flex: 101;  # Chrome and Safari\n-moz-flex: 101;     # Mozilla\n-o-flex: 101;       # Opera\n-ms-flex: 101;      # Internet Explorer\n…`, `21210630627687180000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">…\n-webkit-flex: 101;  # Chrome and Safari\n-moz-flex: 101;     # Mozilla\n-o-flex: 101;       # Opera\n-ms-flex: 101;      # Internet Explorer\n…</code></pre></div>\n<p>It might be inconvenient in development to import or load CSS files as they are. For example, if we have multiple CSS files, we don’t want them to load one by one. We might want them to load simultaneously or we might want them to load inside JavaScript. This can also be done by different webpack loaders.</p>\n<p>To quickly sum up, webpack is a code transformation tool that can handle JavaScript and other files using various loaders. It will take your source files and output transformed files into a destination folder, while also simultaneously optimizing the code, plugging in extensions, or performing other tasks that you’ve set.</p>\n<h3 id=\"webpack-source-and-destination-folders\"><a href=\"#webpack-source-and-destination-folders\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>webpack: Source And Destination Folders</h3>\n<p>Let’s look at our folder structure:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"42417790509980740000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`📂pwa\n ┣ 📂Magento_Theme\n ┣ 📂src\n ┃ ┣ 📂app\t\t\t \n ┃ ┣ 📂config\n ┗ ┗ 📂public  \t`, `42417790509980740000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">📂pwa\n ┣ 📂Magento_Theme\n ┣ 📂src\n ┃ ┣ 📂app\t\t\t \n ┃ ┣ 📂config\n ┗ ┗ 📂public  \t</code></pre></div>\n<p>So, what happens when you run <code class=\"gatsby-code-text\">webpack</code>? It takes a source with all of its contents, e.g. <code class=\"gatsby-code-text\">src/</code> and outputs it into a destination, for example <code class=\"gatsby-code-text\">Magento_Theme/</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"3359118954397510700\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`📂pwa\n ┣ 📂Magento_Theme\n ┃ ┣ 📂templates\n ┃ ┗ 📂web\n ┣ 📂src\n ┃ ┣ 📂app    \n ┃ ┃ ┣ 📜<name>.js\n ┃ ┃ ┗ 📜<name>.scss \n ┃ ┣ 📂config\n ┃ ┗ 📂public  \n ┗   ┗ 📜index.production.phtml`, `3359118954397510700`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">📂pwa\n ┣ 📂Magento_Theme\n ┃ ┣ 📂templates\n ┃ ┗ 📂web\n ┣ 📂src\n ┃ ┣ 📂app    \n ┃ ┃ ┣ 📜<span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>.js\n ┃ ┃ ┗ 📜<span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>.scss \n ┃ ┣ 📂config\n ┃ ┗ 📂public  \n ┗   ┗ 📜index.production.phtml</code></pre></div>\n<p>In this case <code class=\"gatsby-code-text\">webpack</code> or more specifically <code class=\"gatsby-code-text\">html-webpack-plugin</code> will take the <code class=\"gatsby-code-text\">index.production.phtml</code> or <code class=\"gatsby-code-text\">index.development.phtml</code> and rename it to <code class=\"gatsby-code-text\">root.phtml</code> and place it into <code class=\"gatsby-code-text\">Magento_Theme/templates</code> folder. </p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"72921977873481070000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`📂pwa\n ┣ 📂Magento_Theme\n ┃ ┣ 📂templates\n ┃ ┃ ┗ 📜root.phtml\n ┃ ┗ 📂web\n ┣ 📂src\n ┃ ┣ 📂app    \n ┃ ┃ ┣ 📜<name>.js\n ┃ ┃ ┗ 📜<name>.scss \n ┃ ┣ 📂config\n ┃ ┗ 📂public  \n ┗   ┗ 📜index.production.phtml`, `72921977873481070000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">📂pwa\n ┣ 📂Magento_Theme\n ┃ ┣ 📂templates\n ┃ ┃ ┗ 📜root.phtml\n ┃ ┗ 📂web\n ┣ 📂src\n ┃ ┣ 📂app    \n ┃ ┃ ┣ 📜<span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>.js\n ┃ ┃ ┗ 📜<span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>.scss \n ┃ ┣ 📂config\n ┃ ┗ 📂public  \n ┗   ┗ 📜index.production.phtml</code></pre></div>\n<p>Now Magento will understand that there’s a theme that’ll override the root template. Same with JavaScript and style files, which after processing will appear in the <code class=\"gatsby-code-text\">Magento_Theme/web</code> folder. This is how <code class=\"gatsby-code-text\">webpack</code> helps Magento understand ScandiPWA as a theme.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"67358006459957710000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`📂pwa\n ┣ 📂Magento_Theme\n ┃ ┣ 📂templates\n ┃ ┃ ┗ 📜root.phtml\n ┃ ┣ 📂web\n ┃ ┃ ┣ 📂assets\n ┃ ┃ ┣ 📂icons\n ┃ ┃ ┃ ┗📜<name>.bundle.js\n ┃ ┗ ┗ 📂<...>\n ┣ 📂src\n ┃ ┣ 📂app    \n ┃ ┃ ┣ 📜<name>.js\n ┃ ┃ ┗ 📜<name>.scss \n ┃ ┣ 📂config\n ┃ ┗ 📂public  \n ┗   ┗ 📜index.production.phtml`, `67358006459957710000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">📂pwa\n ┣ 📂Magento_Theme\n ┃ ┣ 📂templates\n ┃ ┃ ┗ 📜root.phtml\n ┃ ┣ 📂web\n ┃ ┃ ┣ 📂assets\n ┃ ┃ ┣ 📂icons\n ┃ ┃ ┃ ┗📜<span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>.bundle.js\n ┃ ┗ ┗ 📂<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">..</span>.<span class=\"token operator\">></span>\n ┣ 📂src\n ┃ ┣ 📂app    \n ┃ ┃ ┣ 📜<span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>.js\n ┃ ┃ ┗ 📜<span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>.scss \n ┃ ┣ 📂config\n ┃ ┗ 📂public  \n ┗   ┗ 📜index.production.phtml</code></pre></div>\n<h2 id=\"2-differences-between-production-and-development-set-up\"><a href=\"#2-differences-between-production-and-development-set-up\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Differences Between Production And Development Set-Up</h2>\n<p>If we take a look at the <code class=\"gatsby-code-text\">root.phtml</code> and <code class=\"gatsby-code-text\">index.production.phtml</code> files, we can see that they’re very similar. However, the style files will look completely different. This is because, in the process of parsing the code, the <code class=\"gatsby-code-text\">babel</code> plug-in will transform and optimize it. </p>\n<p>This is where the differences between the production and development set-up will come in.</p>\n<table>\n<thead>\n<tr>\n<th>PRODUCTION</th>\n<th>DEVELOPMENT</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#code-minification-and-splitting\">Code is minified</a></td>\n<td><a href=\"#the-source-map\">Source maps</a></td>\n</tr>\n<tr>\n<td><a href=\"#code-minification-and-splitting\">Code splitting or bundling</a></td>\n<td><a href=\"#the-hot-reload\">Hot reload (<code class=\"gatsby-code-text\">NODE_ENV</code>)</a></td>\n</tr>\n<tr>\n<td><a href=\"#service-worker-pre-cache\">Service Worker Pre-Cache to pre-load assets</a></td>\n<td><a href=\"#the-development-server\">Dev server (with cache)</a></td>\n</tr>\n<tr>\n<td><a href=\"#the-html-entry-file\"><code class=\"gatsby-code-text\">index.production.phtml</code></a></td>\n<td><a href=\"#the-html-entry-file\"><code class=\"gatsby-code-text\">index.development.html</code></a></td>\n</tr>\n<tr>\n<td><a href=\"#debugging-and-building\">TWO-STEP BUILD</a></td>\n<td><a href=\"#debugging-and-building\">NO FILES GENERATED</a></td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"code-minification-and-splitting\"><a href=\"#code-minification-and-splitting\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code Minification And Splitting</h3>\n<p>In the production set-up code will be minified by the <code class=\"gatsby-code-text\">babel</code> plug-in, i.e. all of the unnecessary characters will be removed, making it appear as a single line. </p>\n<p><code class=\"gatsby-code-text\">Webpack</code> will ensure that the code will get split into multiple parts, in this specific case its 20 bundles. Code splitting allows us to load the code when needed, thus making the website faster and more efficient. Besides bundling, <code class=\"gatsby-code-text\">webpack</code> also ensures that the code is loaded as needed according to priority.</p>\n<h3 id=\"the-manifest\"><a href=\"#the-manifest\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code class=\"gatsby-code-text\">manifest</code></h3>\n<p>Let’s look at the <code class=\"gatsby-code-text\">manifest</code> a little. It doesn’t differ between the development and production set-ups. The <code class=\"gatsby-code-text\">manifest</code> is a specific feature of PWA or Progressive Web Applications in general. It is automatically generated and allows us to install the application correctly. </p>\n<p>PWA manifests usually include things like the app name, author, version, description and a list of resources among other things.</p>\n<h3 id=\"service-worker-pre-cache\"><a href=\"#service-worker-pre-cache\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Service Worker Pre-cache</h3>\n<p>The <code class=\"gatsby-code-text\">precache-manifest</code>, however, is only generated in production. Service Worker Pre-cache will download all of the split code or bundles by itself without a specific request and return the bundles immediately when requested. </p>\n<p>The pre-loaded bundles will also ensure that all of the application will be available to you offline even though you haven’t visited it. This only applies to the application’s parts like ‘my account’, ‘card’, ‘checkout’, etc., not the actual data.</p>\n<h3 id=\"the-source-map\"><a href=\"#the-source-map\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Source Map</h3>\n<p>One of the things that only appears in development is a source map. Source maps provide a reference for the code, mapping the minified or transformed code to the original source, thus being a handy debugging tool.</p>\n<h3 id=\"the-hot-reload\"><a href=\"#the-hot-reload\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Hot Reload</h3>\n<p>Not all of the logic can be executed in development mode.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"47303657971767210000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`📂source\n ┣ 📂<…>\n ┣ 📂src\n ┃ ┣ 📂app\t\n ┃ ┃ ┣ 📂<…>\n ┃ ┃ ┗ 📜index.js\t\t \n ┃ ┣ 📂config\n ┃ ┣ 📂public\n ┗ ┗ 📂sw \t`, `47303657971767210000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">📂source\n ┣ 📂<span class=\"token operator\">&lt;</span>…<span class=\"token operator\">></span>\n ┣ 📂src\n ┃ ┣ 📂app\t\n ┃ ┃ ┣ 📂<span class=\"token operator\">&lt;</span>…<span class=\"token operator\">></span>\n ┃ ┃ ┗ 📜index.js\t\t \n ┃ ┣ 📂config\n ┃ ┣ 📂public\n ┗ ┗ 📂sw \t</code></pre></div>\n<p>If we go to the <code class=\"gatsby-code-text\">source</code> folder and open the main <code class=\"gatsby-code-text\">index.js</code> file, we can see that some logic runs only in development, more specifically it’s the hot reload.</p>\n<p>The value <code class=\"gatsby-code-text\">process.env.NODE_ENV === ‘development’</code> ensures that our React application or any other dependent application will have hot reload enabled, that is - the app will reload automatically any time our code changes.</p>\n<p>The app is kept running on the development server with periodic injections of new file versions that are edited at runtime. The main plus of hot reload is the fact that the app’s state is not lost, which is especially useful when customizing a theme.</p>\n<h3 id=\"the-development-server\"><a href=\"#the-development-server\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Development Server</h3>\n<p>The development server is what allows us to use hot reload and memory cache. Only changed files are regenerated, which allows us to perform bundling quicker. </p>\n<p>This is why if you run <code class=\"gatsby-code-text\">npm run build</code> it takes a long time every time, but if you run <code class=\"gatsby-code-text\">npm run watch</code> it takes a long time only once and any subsequent loads will be quick.</p>\n<h3 id=\"the-html-entry-file\"><a href=\"#the-html-entry-file\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The HTML Entry File</h3>\n<p>Another thing that differs between the production and development set-up is the HTML entry file. In a production environment, this file is called <code class=\"gatsby-code-text\">index.production.phtml</code> and in development, it’s <code class=\"gatsby-code-text\">index.development.html</code>.</p>\n<h3 id=\"debugging-and-building\"><a href=\"#debugging-and-building\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debugging And Building</h3>\n<p>It’s worthwhile mentioning that in production set-up, the build process itself is different, i.e. the production set-up application follows a two-step build process where first the Service Worker Pre-Cache is built, after which the actual application is built. </p>\n<p>And lastly, the biggest difference in terms of debugging is the fact that no files are generated in development mode, due to the development server’s memory cache. This can be seen by browsing our folder structures. In development mode the <code class=\"gatsby-code-text\">Magento-Theme</code> folder will not appear. </p>\n<h2 id=\"3-the-config-folder\"><a href=\"#3-the-config-folder\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.\tThe <code class=\"gatsby-code-text\">config</code> Folder</h2>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"88362338731914850000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`📂source\n ┣ 📂<…>\n ┣ 📂src\n ┃ ┣ 📂app     \n ┃ ┣ 📂config\n ┃ ┃ ┣ 📜<…>\n ┃ ┃ ┣ 📜babel.config.js\n ┃ ┃ ┣ 📜meta.config.js\n ┃ ┃ ┣ 📜tests.config.js\n ┃ ┃ ┣ 📜webpack.core.config.js\n ┃ ┃ ┣ 📜webpack.development.config.js\n ┃ ┃ ┣ 📜webpack.extract-translations.config.js\n ┃ ┃ ┣ 📜webpack.production.config.js\n ┃ ┃ ┗ 📜webpack.sw.config.js\n ┃ ┣ 📂public\n ┗ ┗ 📂sw     `, `88362338731914850000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">📂source\n ┣ 📂<span class=\"token operator\">&lt;</span>…<span class=\"token operator\">></span>\n ┣ 📂src\n ┃ ┣ 📂app     \n ┃ ┣ 📂config\n ┃ ┃ ┣ 📜<span class=\"token operator\">&lt;</span>…<span class=\"token operator\">></span>\n ┃ ┃ ┣ 📜babel.config.js\n ┃ ┃ ┣ 📜meta.config.js\n ┃ ┃ ┣ 📜tests.config.js\n ┃ ┃ ┣ 📜webpack.core.config.js\n ┃ ┃ ┣ 📜webpack.development.config.js\n ┃ ┃ ┣ 📜webpack.extract-translations.config.js\n ┃ ┃ ┣ 📜webpack.production.config.js\n ┃ ┃ ┗ 📜webpack.sw.config.js\n ┃ ┣ 📂public\n ┗ ┗ 📂sw     </code></pre></div>\n<p>A brief overview of the <code class=\"gatsby-code-text\">config</code> folder would be as follows:</p>\n<ul>\n<li>\n<p><code class=\"gatsby-code-text\">webpack.development.config.js</code> and <code class=\"gatsby-code-text\">webpack.production.config.js</code></p>\n<ul>\n<li>The differences are as mentioned in <a href=\"#2-differences-between-production-and-development-set-up\">section 2</a>.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"gatsby-code-text\">webpack.extract-translations.config.js</code></p>\n<ul>\n<li>Extracts the internationalization strings from the application. We need to do this periodically in order to update the <code class=\"gatsby-code-text\">.json</code> files with new translations.</li>\n</ul>\n</li>\n</ul>\n<p>We can execute this webpack config file by running the <code class=\"gatsby-code-text\">extract-translations</code> command. We can execute npm commands by typing <code class=\"gatsby-code-text\">npm run &lt;name-of-command&gt;</code>, e.g. <code class=\"gatsby-code-text\">npm run extract-translations</code>, you can read more about npm <a href=\"https://docs.npmjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>. Running a npm command this way ensures that the configuration preset in <code class=\"gatsby-code-text\">package.json</code> file is used.</p>\n<ul>\n<li>\n<p><code class=\"gatsby-code-text\">webpack.sw.config.js</code></p>\n<ul>\n<li>The Service Worker configuration file is a part of the two-step build production set-up.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"gatsby-code-text\">webpack.core.config.js</code></p>\n<ul>\n<li>Configuration of core contribution.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"gatsby-code-text\">babel.config.js</code></p>\n<ul>\n<li>Configuration of the <code class=\"gatsby-code-text\">babel-loader</code>. Read more in <a href=\"https://webpack.js.org/loaders/babel-loader/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webpack documentation</a>, as well as <a href=\"https://babeljs.io/docs/en/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel documentation</a>.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"gatsby-code-text\">meta.config.js</code></p>\n<ul>\n<li>Configuration of meta tags that need to be included into our HTML document.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-available-commands\"><a href=\"#4-available-commands\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.\tAvailable Commands</h2>\n<p>npm or Node package manager allows us to use some nifty aliases that are defined in the <code class=\"gatsby-code-text\">package.json</code> file. This file can be found in the main <code class=\"gatsby-code-text\">source</code> folder. </p>\n<p><code class=\"gatsby-code-text\">npm run build</code> is the most valuable command preset in the <code class=\"gatsby-code-text\">package.json</code> file, because running it allows Magento to recognize a production ready theme. </p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"63962974798644300000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`&quot;scripts&quot;: {\n\n  &quot;build&quot;: &quot;npm run build-sw && webpack --config ./src/config/webpack.production.config.js&quot;,\n\n  &quot;build-sw&quot;: &quot;webpack --config ./src/config/webpack.sw.config.js --mode=production&quot;,\n}`, `63962974798644300000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token string\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build-sw &amp;&amp; webpack --config ./src/config/webpack.production.config.js\"</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token string\">\"build-sw\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --config ./src/config/webpack.sw.config.js --mode=production\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p> These are only two of the ready made scripts. Check out more npm presets in the <code class=\"gatsby-code-text\">package.json</code> file.</p>\n<h3 id=\"what-to-run-in-which-situation\"><a href=\"#what-to-run-in-which-situation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What To Run In Which Situation?</h3>\n<p>If you’re using our Docker environment you don’t have to run anything. Docker does the job on its own.</p>\n<p>However, if you decide to develop on your local machine, the following commands might come in handy: </p>\n<ol>\n<li><a href=\"#npm-ci\"><code class=\"gatsby-code-text\">npm ci</code></a></li>\n<li><a href=\"#npm-run-build\"><code class=\"gatsby-code-text\">npm run build</code></a></li>\n<li><a href=\"#npm-run-pm2-watch\"><code class=\"gatsby-code-text\">npm run pm2-watch</code></a></li>\n<li><a href=\"#npm-run-extract-translations\"><code class=\"gatsby-code-text\">npm run extract-translations</code></a></li>\n</ol>\n<h3 id=\"npm-ci\"><a href=\"#npm-ci\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">npm ci</code></h3>\n<p>If you’re running an existing Magento instance and you want to install a theme you need to run <code class=\"gatsby-code-text\">npm ci</code> first. Not <code class=\"gatsby-code-text\">npm install</code> or <code class=\"gatsby-code-text\">npm i</code>. </p>\n<p><code class=\"gatsby-code-text\">npm ci</code> ensures that you’ll get a more reliable build by firstly deleting your <code class=\"gatsby-code-text\">node_modules</code> folder giving you a fresh start, as well as looking into your <code class=\"gatsby-code-text\">package-lock.json</code> file and installing dependencies of a specified version, instead of modifying the <code class=\"gatsby-code-text\">package-lock.json</code> file like <code class=\"gatsby-code-text\">npm i</code> does.</p>\n<p><code class=\"gatsby-code-text\">npm ci</code> is a security measure that allows us to not break our replication in case of one of the dependencies having a new broken minor release.</p>\n<h3 id=\"npm-run-build\"><a href=\"#npm-run-build\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">npm run build</code></h3>\n<p>The next command you run will be different depending on your needs. If you want to compile a theme and test if Magento is able to recognize it, you need to run <code class=\"gatsby-code-text\">npm run build</code>. This will build the theme and generate a <code class=\"gatsby-code-text\">Magento_Theme</code> folder.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"66114007346137610000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`📂<parent-folder>\n ┣ 📂Magento_Theme\n ┃ ┣ 📂templates\n ┃ ┃ ┗ 📜root.phtml\n ┗ ┗ 📂web`, `66114007346137610000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">📂<span class=\"token operator\">&lt;</span>parent-folder<span class=\"token operator\">></span>\n ┣ 📂Magento_Theme\n ┃ ┣ 📂templates\n ┃ ┃ ┗ 📜root.phtml\n ┗ ┗ 📂web</code></pre></div>\n<p>If you have the <code class=\"gatsby-code-text\">Magento_Theme</code> folder with <code class=\"gatsby-code-text\">root.phtml</code> file and <code class=\"gatsby-code-text\">web</code> folder, it means that Magento should be able to recognize the theme.</p>\n<p>If your application has the <code class=\"gatsby-code-text\">Magento_Theme</code> folder with its contents, but Magento is not able to recognize the theme, you should check the Magento tables and look whether your theme’s name is added to the list.</p>\n<h3 id=\"npm-run-pm2-watch\"><a href=\"#npm-run-pm2-watch\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">npm run pm2-watch</code></h3>\n<p>This command will start the development server, which will be restarted every time you create a new folder. You need to restart the server when creating a new folder because of the memory cache. If you’re creating a new folder with what you want to override a specific component, you need to recompile and the <code class=\"gatsby-code-text\">pm2</code> or process manager will handle this and restart the watching process.</p>\n<p>The development server will be started in the port <code class=\"gatsby-code-text\">:3003</code>, keep in mind that Magento might not function properly, because the request to <code class=\"gatsby-code-text\">/graphql</code> might not be properly sent. </p>\n<p>In this case you might need to change the request-URI constant <code class=\"gatsby-code-text\">cons REQUEST_URI</code> in the <code class=\"gatsby-code-text\">util-request</code> which can be found in <code class=\"gatsby-code-text\">source</code>.</p>\n<p>Another approach would be by adding a NGINX config, which you can locate in our front-end configuration containers as well.</p>\n<p>If none of these solutions work, we would recommend developing your application in our Docker environment which includes everything you need to start building applications seamlessly.</p>\n<h3 id=\"npm-run-extract-translations\"><a href=\"#npm-run-extract-translations\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">npm run extract-translations</code></h3>\n<p>This command will parse through all of your files and find every single template literal ( —(` `); ) that you’ve added. Notice that there should be a simple string in between the backticks, not a variable. After that, the contents of the backticks will be put into the <code class=\"gatsby-code-text\">i18n</code> internationalization folder under the specific language, e.g. all English strings will be appended to the <code class=\"gatsby-code-text\">en_US.json</code> file.</p>\n<p>If a language file’s string translation is <code class=\"gatsby-code-text\">null</code>, that means that we don’t have a translation for the specific term at the moment, so feel free to contribute if you know the language.</p>\n<h2 id=\"to-docker-or-not-to-docker\"><a href=\"#to-docker-or-not-to-docker\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>To Docker Or Not To Docker?</h2>\n<p>The use of <code class=\"gatsby-code-text\">npm run build</code>, <code class=\"gatsby-code-text\">npm run pm2-watch</code> and <code class=\"gatsby-code-text\">npm run extract-translations</code> is not needed if you choose to develop in our Docker environment. These commands will only be required if you decide to install on your local machine.</p>\n<p>However, the command <code class=\"gatsby-code-text\">npm ci</code> is always needed when you pull the latest changes, because we want to make sure that the latest working versions of the packages are installed.</p>","frontmatter":{"title":"Theme Build and Configuration"},"fields":{"path":"content/docs/build-and-configuration.md","slug":"/docs/build-and-configuration.html"}}},"pageContext":{"slug":"/docs/build-and-configuration.html"}},"staticQueryHashes":[]}