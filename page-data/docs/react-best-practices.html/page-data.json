{"componentChunkName":"component---src-templates-docs-js","path":"/docs/react-best-practices.html","result":{"data":{"markdownRemark":{"html":"<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <div class=\"video\"> <iframe src=\"https://www.youtube.com/embed/0tSXwEg26UA\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div> </div>\n<p>Main rules to follow:</p>\n<ul>\n<li><a href=\"#one-class-per-file\">One Class Per File</a></li>\n<li><a href=\"#export-class-and-constants-first\">Export Class And Constants First</a></li>\n<li><a href=\"#separate-into-functions-and-keep-jsx-nesting-low\">Separate Into Functions And Keep JSX Nesting Low</a></li>\n<li><a href=\"#master-bem-and-escape-classname\">Master BEM And Escape <code class=\"gatsby-code-text\">className</code></a></li>\n<li><a href=\"#split-into-smaller-components\">Split Into Smaller Components</a></li>\n<li><a href=\"#use-eslint\">Use ESlint</a></li>\n<li><a href=\"#place-business-logic-in-containers\">Place Business Logic In Containers</a></li>\n<li><a href=\"#use-container-props-and-container-functions\">Use Container Props And Container Functions</a></li>\n<li><a href=\"#keep-proptypes-descriptive\">Keep propTypes Descriptive</a></li>\n<li><a href=\"#make-sure-to-follow-the-code-standard\">Make Sure To Follow The Code Standard</a></li>\n</ul>\n<p>All of the following examples will be based on code found in <code class=\"gatsby-code-text\">Header.component.js</code>.</p>\n<h2 id=\"one-class-per-file\"><a href=\"#one-class-per-file\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One Class Per File</h2>\n<p>Notice that all of the components only have one class declaration.\n<code class=\"gatsby-code-text\">export default</code> ideally shouldn’t be present in the same line of code as the class declaration. It would be much better to export the class separately. The class export will always be the component.</p>\n<p>You should <code class=\"gatsby-code-text\">export default</code> the header itself. This way we are able to use function wrappers on it.</p>\n<h2 id=\"export-class-and-constants-first\"><a href=\"#export-class-and-constants-first\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Export Class And Constants First</h2>\n<p>Always export class and constants first. After which you can safely use <code class=\"gatsby-code-text\">export default</code> and proceed.</p>\n<p>Because when someone will be overriding or modifying your component they might want to work with your exported classes and not the class exported by default.</p>\n<h2 id=\"separate-into-functions-and-keep-jsx-nesting-low\"><a href=\"#separate-into-functions-and-keep-jsx-nesting-low\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Separate Into Functions And Keep JSX Nesting Low</h2>\n<p>When writing rendering functions, try to keep JSX nesting to a minimum. This will make it easier for others to modify your code.</p>\n<h2 id=\"master-bem-and-escape-classname\"><a href=\"#master-bem-and-escape-classname\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Master BEM And Escape <code class=\"gatsby-code-text\">className</code></h2>\n<p>Make sure to get comfortable with writing code using the <a href=\"https://github.com/rebem/rebem-jsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rebem-jsx</a> library. Use <code class=\"gatsby-code-text\">block</code>, <code class=\"gatsby-code-text\">elem</code>, <code class=\"gatsby-code-text\">mods</code> and <code class=\"gatsby-code-text\">mix</code> properties to generate the appropriate class names using JSX HTML elements. Refrain from using the className property as it is banned in ScandiPWA by ESlint config.</p>\n<p>If you want to use the BEM properties outside of JSX, you’ll have to declare them and handle them separately.</p>\n<p>Another reason for straying clear of className is their static nature. <code class=\"gatsby-code-text\">className</code> property is not a dynamic field, so it’s very hard to work with it.</p>\n<h2 id=\"split-into-smaller-components\"><a href=\"#split-into-smaller-components\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Split Into Smaller Components</h2>\n<p>Let’s look at an example where you have an element array that you’d like to map, firing an action on each click on an element.</p>\n<p>If you’re using arrow functions while rendering an array, you’ll be creating an anonymous function on every render, which then will be very slow.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"32834333784299630000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`<ul>\n  items.map(item) => {\n    return(\n      <li onclick={()=> this.handleClick(id)}>\n      ...\n      </li>\n    );\n  }\n</ul>`, `32834333784299630000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"gatsby-code-html\"><code class=\"gatsby-code-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  items.map(item) => {\n    return(\n      &lt;li onclick={()=> this.handleClick(id)}>\n      ...\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    );\n  }\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Instead of rendering your list element on every click, you should create a smaller component <code class=\"gatsby-code-text\">&lt;listItem&gt;</code> that accepts a prop <code class=\"gatsby-code-text\">Item</code>. So, instead of passing the <code class=\"gatsby-code-text\">id</code> and creating an anonymous function on every click you create a smaller component and pass an <code class=\"gatsby-code-text\">Item</code> property to it. This way rendering can be performed much faster.</p>\n<h2 id=\"use-eslint\"><a href=\"#use-eslint\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use ESlint</h2>\n<p>If you don’t know how to configure ESlint, check out <a href=\"https://docs.scandipwa.com/docs/eslint-stylelint.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">how it’s done</a> in ScandiPWA.</p>\n<p>ESlint will allow you to maintain the most stringent of code standards, making your code easy, breezy and beautiful. If you choose to use the ScandiPWA ESlint configuration, contributing and consequently reviewing your code will be made much easier.</p>\n<h2 id=\"place-business-logic-in-containers\"><a href=\"#place-business-logic-in-containers\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Place Business Logic In Containers</h2>\n<p>Make sure your component’s expected functionality is crystal clear. The <code class=\"gatsby-code-text\">container.js</code> files should contain all the logic for the functionality of your component.</p>\n<p>Make sure you’re using the containers in the previously established manner.</p>\n<h2 id=\"use-container-props-and-container-functions\"><a href=\"#use-container-props-and-container-functions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Container Props And Container Functions</h2>\n<p><code class=\"gatsby-code-text\">containerProps()</code> provide constant values that are required for the component to render and the <code class=\"gatsby-code-text\">containerFunctions()</code> are what’s calling on the component to change the state or make a request.</p>\n<p>Another reason for adhering to this rule is that it’ll allow you to have a more efficient rendering process. This happens because instead of passing the props from the parent component you are passing the processed props from your component.</p>\n<p>Make sure that your containers and components are using and declaring <code class=\"gatsby-code-text\">propTypes</code> and <code class=\"gatsby-code-text\">defaultProps</code>. If you’re using the ScandiPWA ESlint configuration, you’ll receive a reminder to do so.</p>\n<h2 id=\"keep-proptypes-descriptive\"><a href=\"#keep-proptypes-descriptive\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Keep propTypes Descriptive</h2>\n<p>When declaring a <code class=\"gatsby-code-text\">propType</code>, don’t be lazy and type <code class=\"gatsby-code-text\">propTypes.shape</code>. Instead try to be as informative as possible and use descriptibe <code class=\"gatsby-code-text\">propType</code>. ScandiPWA has a specific folder for storing <code class=\"gatsby-code-text\">propTypes</code>. You can find it in <code class=\"gatsby-code-text\">app/type</code> directory.</p>\n<h2 id=\"make-sure-to-follow-the-code-standard\"><a href=\"#make-sure-to-follow-the-code-standard\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Make Sure To Follow The Code Standard</h2>\n<p>Make sure to follow overall coding best practices and keep your code clean. You can also check out ScandiPWA’s <a href=\"https://docs.scandipwa.com/docs/best-practices-styles.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">best practices for working with styles</a>.</p>","frontmatter":{"title":"React Best Practices"},"fields":{"path":"content/docs/react-best-practices.md","slug":"/docs/react-best-practices.html"}}},"pageContext":{"slug":"/docs/react-best-practices.html"}},"staticQueryHashes":[]}