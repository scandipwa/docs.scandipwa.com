{"componentChunkName":"component---src-templates-docs-js","path":"/docs/debug-and-inspect.html","result":{"data":{"markdownRemark":{"html":"<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <div class=\"video\"> <iframe src=\"https://www.youtube.com/embed/LBSovCTT7rM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div> </div>\n<p>Prerequisites:</p>\n<ul>\n<li>Installation of ScandiPWA <a href=\"https://docs.scandipwa.com/docs/linux.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">theme</a></li>\n<li>Knowledge of ScandiPWA <a href=\"https://docs.scandipwa.com/docs/file-structure-ui.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">file structure and UI components</a></li>\n</ul>\n<p>This tutorial assumes that you have installed the ScandiPWA <a href=\"https://docs.scandipwa.com/docs/linux.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">base theme</a> and are familiar with ScandiPWA <a href=\"https://docs.scandipwa.com/docs/file-structure-ui.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">file structure and UI components</a>. </p>\n<p>Go to <code class=\"gatsby-code-text\">scandipwa-base</code> folder and run the following alias</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"70757072141666560000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`dcf up -d`, `70757072141666560000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">dcf up -d</code></pre></div>\n<p>Use the alias <code class=\"gatsby-code-text\">frontlogs</code> or <code class=\"gatsby-code-text\">dcf logs -f frontend</code> to see what the state of your application is.</p>\n<p>The following output means that the front-end is ready:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"63329562336392840000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`ℹ ｢wdm｣: Compiled successfully`, `63329562336392840000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">ℹ ｢wdm｣: Compiled successfully</code></pre></div>\n<p>Open the folder <code class=\"gatsby-code-text\">scandipwa-base/src/app/design/frontend/Scandiweb/pwa</code> with your text editor.</p>\n<p>It is recommended to open an additional workspace for the vendor theme - add the <code class=\"gatsby-code-text\">scandipwa-base/src/vendor/scandipwa/source</code> folder.</p>\n<p>To start the debugging process open Chrome, go to <code class=\"gatsby-code-text\">scandipwa.local</code> and compare the output with your requirements.</p>\n<p>For example, say we needed to change the border of the product cart when it’s loading. How to understand where to look and what is the correct component name?</p>\n<p>Turns out its pretty easy due to the fact that ScandiPWA uses <a href=\"http://getbem.com/introduction/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">BEM or Block Element Modifiers</a>. It’s a tool for organizing class names, this lets us have a block that has elements, all with modifiers.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"24890615442683560000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`block[modifier]         # parent block\n┃ ┗ element[modifier]\n┗ element[modifier]`, `24890615442683560000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">block<span class=\"token punctuation\">[</span>modifier<span class=\"token punctuation\">]</span>         <span class=\"token comment\"># parent block</span>\n┃ ┗ element<span class=\"token punctuation\">[</span>modifier<span class=\"token punctuation\">]</span>\n┗ element<span class=\"token punctuation\">[</span>modifier<span class=\"token punctuation\">]</span></code></pre></div>\n<p>In React it could have the following representation:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"54486549965072450000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`.Breadcrumbs            # block\n┃ ┗ .Breadcrumbs-list   # element\n┗ .Breadcrumbs-item     # element`, `54486549965072450000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">.Breadcrumbs            <span class=\"token comment\"># block</span>\n┃ ┗ .Breadcrumbs-list   <span class=\"token comment\"># element</span>\n┗ .Breadcrumbs-item     <span class=\"token comment\"># element</span></code></pre></div>\n<p>The elements are divided using dashes (<code class=\"gatsby-code-text\">-</code>) and the modifiers are divided using underscores (<code class=\"gatsby-code-text\">_</code>).</p>\n<p>Why do we need to have the <code class=\"gatsby-code-text\">Breadcrumbs-list</code> and <code class=\"gatsby-code-text\">Breadcrumbs-item</code>? It allows us to have no nesting in our styles. </p>\n<p>The specificity of the BEM styles will be very low and thus the rerendering will be very cheap resource wise. When you’re writing the SCSS for them it will look something like this:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"3900644053663349000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`.Breadcrumbs{\n  &-list{\n    ...\n  }\n}`, `3900644053663349000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"gatsby-code-css\"><code class=\"gatsby-code-css\"><span class=\"token selector\">.Breadcrumbs</span><span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">&amp;-list</span><span class=\"token punctuation\">{</span>\n    ...\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s inspect an element:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"27316651094294000000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`.ProductCard-Image_large`, `27316651094294000000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"gatsby-code-css\"><code class=\"gatsby-code-css\">.ProductCard-Image_large</code></pre></div>\n<p>This means that we need to search in the component called <code class=\"gatsby-code-text\">ProductCard</code>. If you’re using VSCode you can press <code class=\"gatsby-code-text\">ctrl + P</code> to search for files and type in <code class=\"gatsby-code-text\">ProductCard</code>. Select the <code class=\"gatsby-code-text\">ProductCard.style.scss</code> file and you’ll see that right there we have a declaration:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"7165925125089467000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`.ProductCard {            \n    padding-left: 0;\n    min-width: 0;\n\n    &::before {\n        content: none;\n    }\n...`, `7165925125089467000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"gatsby-code-scss\"><code class=\"gatsby-code-scss\"><span class=\"token selector\">.ProductCard </span><span class=\"token punctuation\">{</span>            \n    <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n\n    <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>::before </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n...</code></pre></div>\n<p>How can we be 100% sure that any element we see inside of our application will be connected and declared in our block?</p>\n<p>You must make sure that the block is declared in your element’s file. In this case it’s <code class=\"gatsby-code-text\">block=&quot;ProductCard&quot;</code> in the file <code class=\"gatsby-code-text\">ProductCard.component.js</code> which generates the <code class=\"gatsby-code-text\">ProductCard</code> class name, which is the parent block.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"31844783118066910000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`render() {\n    const {\n        children,\n        mix,\n        isLoading\n    } = this.props;\n\n     return (\n        <li\n          block=&quot;ProductCard&quot;  \n          mix={ mix }\n...`, `31844783118066910000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n        children<span class=\"token punctuation\">,</span>\n        mix<span class=\"token punctuation\">,</span>\n        isLoading\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>li\n          block<span class=\"token operator\">=</span><span class=\"token string\">\"ProductCard\"</span>  \n          mix<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> mix <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>Next in the file we see the following element that will generate <code class=\"gatsby-code-text\">.ProductCard-Figure</code> where the block is <code class=\"gatsby-code-text\">ProductCard</code> and element is <code class=\"gatsby-code-text\">Figure</code>, separated by a dash.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"21284621470972543000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`<figure block=&quot;ProductCard&quot; elem=&quot;Figure&quot;> \n  { this.renderPicture() }\n</figure>`, `21284621470972543000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>figure</span> <span class=\"token attr-name\">block</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ProductCard<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">elem</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Figure<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> \n  </span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderPicture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>figure</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>You can inspect any element in your browser and look for blocks and elements. Use the class names to easily find the component and style files using the VSCode search function. </p>\n<p>If you put an angle bracket before the class name <code class=\"gatsby-code-text\">&lt;some-name</code>, you can easily find the usage of the component is JSX templates.</p>\n<p>Chrome developer tool “Components” tab is basically a React debugger tool, which allows you to inspect your components using a debugger. It tells you what state your component is in, what’s in its props and how it’s interacting with them.</p>","frontmatter":{"title":"How To Debug And Inspect A Theme"},"fields":{"path":"content/docs/debug-and-inspect.md","slug":"/docs/debug-and-inspect.html"}}},"pageContext":{"slug":"/docs/debug-and-inspect.html"}},"staticQueryHashes":[]}