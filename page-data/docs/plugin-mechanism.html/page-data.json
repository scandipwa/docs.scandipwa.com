{"componentChunkName":"component---src-templates-docs-js","path":"/docs/plugin-mechanism.html","result":{"data":{"markdownRemark":{"html":"<p>As of v3, ScandiPWA supports frontend plugins - reusable extensions that once created can be used in any project utilising ScandiPWA v3. These can be used to modify the functionality of almost any part of ScandiPWA.</p>\n<h2 id=\"extension-file-structure\"><a href=\"#extension-file-structure\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extension file structure</h2>\n<p>A ScandiPWA extension is an M2 module (composer package) with an additional directory - <code class=\"gatsby-code-text\">scandipwa</code>, which contains ScandiPWA frontend-related functionality. The extension can contain any other M2 directories with backend functionality implementation. For example, the extension below has the <code class=\"gatsby-code-text\">etc</code> and <code class=\"gatsby-code-text\">Model</code> directories.</p>\n<p>All directories in <code class=\"gatsby-code-text\">scandipwa</code> are optional. However, following the specified structure is mandatory - the <code class=\"gatsby-code-text\">app</code> and <code class=\"gatsby-code-text\">sw</code> subdirectories of <code class=\"gatsby-code-text\">scandipwa</code> follow the same structure as <code class=\"gatsby-code-text\">vendor/scandipwa/source/src/(app|sw)</code>. These directories have the same meaning: <code class=\"gatsby-code-text\">component</code> is for your extension’s components, <code class=\"gatsby-code-text\">query</code> is for GraphQL queries, etc.</p>\n<p>The <code class=\"gatsby-code-text\">plugin</code> directory contains files specifying the configuration and implementation of your plugins. Details are provided below.</p>\n<p>A correct file structure is essential for every ScandiPWA extension. Any diversity from the pattern talked about in this article can cause malfunction. ScandiPWA extension’s file structure overview:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"94025610322027540000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`📦my-awesome-extension\n ┃ ┣ 📂etc\n ┃ ┃ ┗ # ...\n ┃ ┗ 📂Model\n ┃   ┗ # ...\n ┣ 📂src\n ┃ ┗ 📂scandipwa   # Frontend-related functionality\n ┃   ┣ 📂app      # Plugins and functionality for the app context\n ┃   ┃ ┣ 📂component\n ┃   ┃ ┣ 📂query\n ┃   ┃ ┣ 📂route\n ┃   ┃ ┣ 📂store\n ┃   ┃ ┣ 📂util\n ┃   ┃ ┗ 📂plugin\n ┃   ┃   ┗ 📜<name>.plugin.js # Plugin configuration and implementation\n ┃   ┗ 📂 sw       # Plugins and functionality for the Service Worker context\n ┃     ┣ 📂handler\n ┃     ┣ 📂util\n ┃     ┗ 📂plugin\n ┃       ┗ 📜<name>.plugin.js # Plugin configuration and implementation\n ┣ 📜package.json  # JS dependencies\n ┗ 📜composer.json # Composer dependencies and the PACKAGE NAME which is mandatory`, `94025610322027540000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">📦my-awesome-extension\n ┃ ┣ 📂etc\n ┃ ┃ ┗ <span class=\"token comment\"># ...</span>\n ┃ ┗ 📂Model\n ┃   ┗ <span class=\"token comment\"># ...</span>\n ┣ 📂src\n ┃ ┗ 📂scandipwa   <span class=\"token comment\"># Frontend-related functionality</span>\n ┃   ┣ 📂app      <span class=\"token comment\"># Plugins and functionality for the app context</span>\n ┃   ┃ ┣ 📂component\n ┃   ┃ ┣ 📂query\n ┃   ┃ ┣ 📂route\n ┃   ┃ ┣ 📂store\n ┃   ┃ ┣ 📂util\n ┃   ┃ ┗ 📂plugin\n ┃   ┃   ┗ 📜<span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>.plugin.js <span class=\"token comment\"># Plugin configuration and implementation</span>\n ┃   ┗ 📂 sw       <span class=\"token comment\"># Plugins and functionality for the Service Worker context</span>\n ┃     ┣ 📂handler\n ┃     ┣ 📂util\n ┃     ┗ 📂plugin\n ┃       ┗ 📜<span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>.plugin.js <span class=\"token comment\"># Plugin configuration and implementation</span>\n ┣ 📜package.json  <span class=\"token comment\"># JS dependencies</span>\n ┗ 📜composer.json <span class=\"token comment\"># Composer dependencies and the PACKAGE NAME which is mandatory</span></code></pre></div>\n<h2 id=\"creating-a-simple-extension\"><a href=\"#creating-a-simple-extension\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a simple extension</h2>\n<ol>\n<li>\n<p>In a subdirectory of your package, <code class=\"gatsby-code-text\">src/scandipwa/app/plugin</code>, create files for your plugins. By convention, these <strong>must</strong> end with <code class=\"gatsby-code-text\">.plugin.js</code></p>\n<p>i. Implement your plugin’s logic (see <a href=\"#plugin-implementation\">Plugin implementation</a>)</p>\n<p>ii. Configure your plugin’s target (see <a href=\"#plugin-configuration\">Plugin configuration</a>)</p>\n</li>\n<li>Enable your extension in scandipwa.json (see <a href=\"#enabling-extensions\">Enabling extensions</a>)</li>\n<li>Restart the frontend compilation script for the configuration to take effect. This is also necessary whenever the scandipwa.json file is changed.</li>\n</ol>\n<h2 id=\"plugin-implementation\"><a href=\"#plugin-implementation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plugin implementation</h2>\n<p>Plugins are used to alter the behavior of functions or classes. This is done by creating wrappers for existing values to control their new behavior, similarly to Magento “around” plugins.</p>\n<p>There are 3 main types of plugins: plugins that wrap around functions, those that wrap around other properties and those that wrap around classes.</p>\n<ol>\n<li><em>Function</em> plugins act as wrappers for the function they plug into, and are called every time the original function’s call is intercepted, instead of that function. The initial function is available in the plugin-wrapper as <code class=\"gatsby-code-text\">callback</code>. It is always bound to the context it originated from (<code class=\"gatsby-code-text\">instance</code> for members, <code class=\"gatsby-code-text\">context</code> for regular functions).</li>\n<li><em>Property</em> plugins modify their instances’ properties during the instantiation time. These plugins are called once for each new instance of a specific class.</li>\n<li><em>Class</em> plugins are meant to modify the classes themselves. It is possible to use them to wrap your component into some HOCs, although such approach is not recommended. Using these plugins (which wrap around classes) enables extending the original class via inheritance and replacing the original class in the application with the modified one (this replacement happens behind the scenes just as with the other plugin types).</li>\n</ol>\n<h3 id=\"function-plugins\"><a href=\"#function-plugins\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Function</em> plugins</h3>\n<p>Each plugin which wraps around a function is a function of the following form: <code class=\"gatsby-code-text\">function plugin(args, callback, instance) { ... }</code> with the following arguments’ meanings.</p>\n<ul>\n<li><code class=\"gatsby-code-text\">args</code>: an array of arguments that are passed to the function</li>\n<li><code class=\"gatsby-code-text\">callback</code>: the original function, or the next plugin (which also has a <code class=\"gatsby-code-text\">callback</code> which also has either the original function or the next plugin etc.)</li>\n<li><code class=\"gatsby-code-text\">instance</code>: the instance which is the original call context of the function</li>\n</ul>\n<p>Example:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"59393910098592010000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const aroundFunction = (args, callback, instance) => {\n\t// Use array destructuring to get specific arguments from the array\n\tconst [foo] = args;\n\n\tconsole.log(\\`The first argument is \\${foo}\\`)\n\n\t// Proceed to the (original callee|next plugin)\n\tcallback(...args);\n}`, `59393910098592010000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">aroundFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> instance</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Use array destructuring to get specific arguments from the array</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The first argument is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>foo<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Proceed to the (original callee|next plugin)</span>\n\t<span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><strong>Note</strong>:</p>\n<p>It is recommended to follow the naming convention for the arguments of these functions for consistency and clarity</p>\n</blockquote>\n<h3 id=\"property-plugins\"><a href=\"#property-plugins\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Property</em> plugins</h3>\n<p>Each plugin that wraps around a <strong><em>property</em></strong>  is a function of the following form: <code class=\"gatsby-code-text\">function plugin(prop, instance) { ... }</code> with the following arguments’ meanings.</p>\n<ul>\n<li><code class=\"gatsby-code-text\">prop</code>: the value you are wrapping around. Similar to the <code class=\"gatsby-code-text\">callback</code> in the ‘function’ plugins, either has the original property or a value returned from the other plugin(s)</li>\n<li><code class=\"gatsby-code-text\">instance</code>: an instance this property is a member of</li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"53654442815279825000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`// We can wrap around any value - objects, arrays, strings...\n// Example: wrapping around an object\nconst property = (prop, instance) => {\n    return {\n        ...prop, // Keep the original values\n        // Let's add a new value to this object\n        someAddedValue: 'new value!'\n    }\n}`, `53654442815279825000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// We can wrap around any value - objects, arrays, strings...</span>\n<span class=\"token comment\">// Example: wrapping around an object</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">property</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prop<span class=\"token punctuation\">,</span> instance</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>prop<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Keep the original values</span>\n        <span class=\"token comment\">// Let's add a new value to this object</span>\n        someAddedValue<span class=\"token operator\">:</span> <span class=\"token string\">'new value!'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"class-plugins\"><a href=\"#class-plugins\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Class</em> plugins</h3>\n<p>Each plugin that wraps around a <strong><em>class</em></strong>  is a function of the following form: <code class=\"gatsby-code-text\">function plugin(X) { ... }</code> with the following arguments’ meanings.</p>\n<ul>\n<li><code class=\"gatsby-code-text\">X</code>: the class you are interacting with</li>\n</ul>\n<p>The described below is a not recommended approach. This is risky because it may break some classes’ properties due to the <code class=\"gatsby-code-text\">babel-transform-class-properties</code> plugin’s internal mechanics.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"34033778610857234000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const addRouter = (CategoryFilterOverlay) => {\n    // E.g: return the original class wrapped in a HOC\n    return withRouter(CategoryFilterOverlay);\n}`, `34033778610857234000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addRouter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">CategoryFilterOverlay</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// E.g: return the original class wrapped in a HOC</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span>CategoryFilterOverlay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"gatsby-code-text\">class</code> API is designed to be used as follows. Remember that you <strong>SHOULD NEVER</strong> copy the original code to your extend’s members, use <code class=\"gatsby-code-text\">super</code> or any other level of abstraction for that.</p>\n<blockquote>\n<p><strong>Note</strong>:</p>\n<p>Using this to implement React lifecycle members that are missing from the initial class is not recommended. Prefer using the regular <code class=\"gatsby-code-text\">member-function</code> interception to do that, it provides an opportunity for different extensions to implement them without overriding each other.</p>\n</blockquote>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"96678735735911090000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const addBlockBelow = (CategoryFilterOverlay) => (\n\tclass ExtendedCategoryFilterOverlay extends CategoryFilterOverlay {\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t{ super.render() }\n\t\t\t\t<div>\n\t\t\t\t\tAdditional block!\n\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)\n\t\t}\n\t}\n)`, `96678735735911090000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addBlockBelow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">CategoryFilterOverlay</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExtendedCategoryFilterOverlay</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CategoryFilterOverlay</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t\t</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t\t\tAdditional block!\n\t\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"plugin-configuration\"><a href=\"#plugin-configuration\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plugin configuration</h2>\n<p>Once you have created your plugin functions, you need to specify which places you want to plug into. In order to do this, each plugin file should have a default export - a plugin configuration object.</p>\n<p>In the plugin configuration, the following information can be specified:</p>\n<ol>\n<li><strong>Namespace</strong>: Every class and function that can be plugged into has a namespace, indicated with the <code class=\"gatsby-code-text\">@namespace</code> decorator.</li>\n<li><strong>What</strong> aspect of the namespace you want to modify…</li>\n</ol>\n<h3 id=\"if-you-are-plugging-into-a-class\"><a href=\"#if-you-are-plugging-into-a-class\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>If you are plugging into a <em>class</em>:</h3>\n<ul>\n<li>Use the <code class=\"gatsby-code-text\">class</code> plugin if you want to replace the entire class with something else (see an example above). While it is technically possible to replace the class with another class entirely, this is VERY unsafe.</li>\n<li>Specify <code class=\"gatsby-code-text\">member-function</code> and a function plugin if you want to alter the behavior of the class’s method. E.g: plugging into <code class=\"gatsby-code-text\">render</code> or <code class=\"gatsby-code-text\">componentDidMount</code>.</li>\n<li>Specify <code class=\"gatsby-code-text\">member-property</code> and a property plugin if you want to alter the value of a field of the class. E.g: plugging into <code class=\"gatsby-code-text\">state</code>.</li>\n<li>Specify <code class=\"gatsby-code-text\">static-member</code> and a property plugin if you want to modify a class’ static field.</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>:</p>\n<p>If you want to plug into a class member that is an arrow function, still use <code class=\"gatsby-code-text\">member-function</code>, not <code class=\"gatsby-code-text\">member-property</code>.</p>\n</blockquote>\n<h3 id=\"if-you-are-not-plugging-into-a-class\"><a href=\"#if-you-are-not-plugging-into-a-class\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>If you are <em>not</em> plugging into a <em>class</em>:</h3>\n<p>If you are plugging into a function that has its own namespace and is not part of a class: Use the <code class=\"gatsby-code-text\">function</code> plugin type.</p>\n<p><strong>Name</strong>: if you are targetting a class member, you must specify its name.</p>\n<p><strong>Position</strong> (Optional, defaults to 100): Specifies the order in which plugins are applied. Plugins with lower position will be called before plugins with higher position.</p>\n<blockquote>\n<p><strong>Note</strong>:</p>\n<p>You can create class members that do not exist in the original classes and they will be called as you’d expect writing them directly in the class. It is useful when you need some lifecycle member functions that are not present in the original class. <strong>Remember</strong> to call <code class=\"gatsby-code-text\">callback</code> even if the original member is not present, that will make your plugin compatible with other plugins around the same member, by calling them after your plugin finishes its work.</p>\n</blockquote>\n<h3 id=\"plugin-configuration-object-format\"><a href=\"#plugin-configuration-object-format\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plugin configuration object format</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"88885763465711620000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`export default {\n    '<namespace>': {\n        'member-function': {\n            '<name>': plugin\n        },\n        'member-property': {\n            '<name>': plugin\n        },\n        'static-member': {\n            '<name>': plugin\n        },\n\n        'function': plugin,\n        'class': plugin\n    }\n}`, `88885763465711620000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'&lt;namespace>'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'member-function'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'&lt;name>'</span><span class=\"token operator\">:</span> plugin\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'member-property'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'&lt;name>'</span><span class=\"token operator\">:</span> plugin\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'static-member'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'&lt;name>'</span><span class=\"token operator\">:</span> plugin\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token string\">'function'</span><span class=\"token operator\">:</span> plugin<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'class'</span><span class=\"token operator\">:</span> plugin\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Where <em>plugin</em> can be in one of the following four formats:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"20358730895721644000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`// example plugin:\n// const somePlugin = (args, callback, instance) => callback(...args)\n\n// To specify a simple plugin, use:\nsomePlugin\n\n// If you want to specify multiple plugins for the same namespace and target (you are not going to need this often):\n[somePlugin, someOtherPlugin]\n\n// If you want to specify a priority for your plugin to be called sooner/later than other plugins:\n{\n    position: 42, // defaults to 100\n    implementation: somePlugin\n}\n\n// If you want to specify multiple plugins for the same namespace and target, as well as a position for each:\n[\n    {\n        position: 42,\n        implementation: somePlugin\n    },\n    {\n        position: 1984,\n        implementation: someOtherPlugin\n    }\n]`, `20358730895721644000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// example plugin:</span>\n<span class=\"token comment\">// const somePlugin = (args, callback, instance) => callback(...args)</span>\n\n<span class=\"token comment\">// To specify a simple plugin, use:</span>\nsomePlugin\n\n<span class=\"token comment\">// If you want to specify multiple plugins for the same namespace and target (you are not going to need this often):</span>\n<span class=\"token punctuation\">[</span>somePlugin<span class=\"token punctuation\">,</span> someOtherPlugin<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// If you want to specify a priority for your plugin to be called sooner/later than other plugins:</span>\n<span class=\"token punctuation\">{</span>\n    position<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// defaults to 100</span>\n    implementation<span class=\"token operator\">:</span> somePlugin\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// If you want to specify multiple plugins for the same namespace and target, as well as a position for each:</span>\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        position<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n        implementation<span class=\"token operator\">:</span> somePlugin\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        position<span class=\"token operator\">:</span> <span class=\"token number\">1984</span><span class=\"token punctuation\">,</span>\n        implementation<span class=\"token operator\">:</span> someOtherPlugin\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Example:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"57200935761875034000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`// e.g.\n// const hideMenuPlugin = (args, callback, instance) => null;\n\nexport default {\n    'Component/Header/Component': {\n        'member-function': {\n            'renderMenu': hideMenuPlugin\n        },\n        'member-property': {\n            'renderMap': {\n                    implementation: alterRenderMapPlugin,\n                    position: 101\n                }\n        },\n        'static-member': {\n            'propTypes': [\n                {\n                    position: 66,\n                    implementation: updatePropTypesPlugin\n                },\n                {\n                    position: 67,\n                    implementation: anotherUpdatePropTypesPlugin\n                }\n            ]\n        },\n    },\n    'Component/Header/Container/mapDispatchToProps': {\n        'function': mapDispatchToPropsPlugin\n    }\n};`, `57200935761875034000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// e.g.</span>\n<span class=\"token comment\">// const hideMenuPlugin = (args, callback, instance) => null;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'Component/Header/Component'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'member-function'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'renderMenu'</span><span class=\"token operator\">:</span> hideMenuPlugin\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'member-property'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'renderMap'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    implementation<span class=\"token operator\">:</span> alterRenderMapPlugin<span class=\"token punctuation\">,</span>\n                    position<span class=\"token operator\">:</span> <span class=\"token number\">101</span>\n                <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'static-member'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'propTypes'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    position<span class=\"token operator\">:</span> <span class=\"token number\">66</span><span class=\"token punctuation\">,</span>\n                    implementation<span class=\"token operator\">:</span> updatePropTypesPlugin\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{</span>\n                    position<span class=\"token operator\">:</span> <span class=\"token number\">67</span><span class=\"token punctuation\">,</span>\n                    implementation<span class=\"token operator\">:</span> anotherUpdatePropTypesPlugin\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Component/Header/Container/mapDispatchToProps'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'function'</span><span class=\"token operator\">:</span> mapDispatchToPropsPlugin\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"plugging-into-other-plugins-classes\"><a href=\"#plugging-into-other-plugins-classes\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plugging into other plugins’ classes</h2>\n<p>ScandiPWA allows plugging into plugins’ classes, such as components, queries, etc. The plugin configuration files (<code class=\"gatsby-code-text\">.plugin.js</code>) cannot be plugged into. <code class=\"gatsby-code-text\">.plugin.js</code> files’ contents can only be modified by overriding them in a theme.</p>\n<h2 id=\"enabling-extensions\"><a href=\"#enabling-extensions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enabling extensions</h2>\n<ol>\n<li>Properly place your extension</li>\n</ol>\n<p>Any ScandiPWA extension is an M2 module, hence the placement must be the same in order for the M2 backend part to work properly. The only viable place to install the extension without any additional actions is the <code class=\"gatsby-code-text\">app/code/&lt;vendor&gt;/&lt;module&gt;</code> directory.</p>\n<ol start=\"2\">\n<li>Enable the backend part using the standard M2 way: <code class=\"gatsby-code-text\">magento se:up</code>, if necessary also <code class=\"gatsby-code-text\">magento mo:en &lt;module name&gt;</code> can be used.</li>\n<li>Reference the extension from your theme’s <code class=\"gatsby-code-text\">scandipwa.json</code>. In this file, you can specify the path to the extensions that the theme should use. Without specifying an extension here, all of its plugins will be ignored.</li>\n</ol>\n<p>The <code class=\"gatsby-code-text\">scandipwa.json</code> has the following format:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"43080982948713320000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n    // ...\n    &quot;extensions&quot;: {\n        &quot;<name>&quot;: &quot;<P>&quot;,\n        // Examples:\n        &quot;PayPal&quot;: &quot;vendor/scandipwa/paypal-graphql&quot;,\n        &quot;GTM&quot;: &quot;app/code/ScandiPWA/GtmGraphQl&quot;,\n    }\n    // ...\n}`, `43080982948713320000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsxon5\"><pre class=\"gatsby-code-jsxon5\"><code class=\"gatsby-code-jsxon5\">{\n    // ...\n    &quot;extensions&quot;: {\n        &quot;&lt;name&gt;&quot;: &quot;&lt;P&gt;&quot;,\n        // Examples:\n        &quot;PayPal&quot;: &quot;vendor/scandipwa/paypal-graphql&quot;,\n        &quot;GTM&quot;: &quot;app/code/ScandiPWA/GtmGraphQl&quot;,\n    }\n    // ...\n}</code></pre></div>\n<p>Explanation:</p>\n<ul>\n<li><code class=\"gatsby-code-text\">&lt;name&gt;</code> is an arbitrary name for the plugin</li>\n<li><code class=\"gatsby-code-text\">&lt;P&gt;</code> is the relative path from Magento root to the extension’s root</li>\n</ul>\n<h2 id=\"outdated-video-tutorials\"><a href=\"#outdated-video-tutorials\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outdated video tutorials</h2>\n<blockquote>\n<p><strong>Note</strong>:</p>\n<p>You may use these videos for some general guidance of the plugin development process, but please be aware that they are outdated. Read the documentation above for the most up-to-date details</p>\n</blockquote>\n<h3 id=\"implementing-an-extension-from-scratch\"><a href=\"#implementing-an-extension-from-scratch\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implementing an extension from scratch</h3>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <div class=\"video\"> <iframe src=\"https://www.youtube.com/embed/9f6rpIrlNMk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div> </div>\n<h3 id=\"implementing-an-extension-from-customization\"><a href=\"#implementing-an-extension-from-customization\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implementing an extension from customization</h3>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <div class=\"video\"> <iframe src=\"https://www.youtube.com/embed/N2TJJbSDTbM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div> </div>","frontmatter":{"title":"Plugins: implementation"},"fields":{"path":"content/docs/plugin-mechanism.md","slug":"/docs/plugin-mechanism.html"}}},"pageContext":{"slug":"/docs/plugin-mechanism.html"}},"staticQueryHashes":[]}