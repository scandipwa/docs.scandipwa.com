{"componentChunkName":"component---src-templates-docs-js","path":"/docs/creating-resolver.html","result":{"data":{"markdownRemark":{"html":"<p>The ScandiPWA works by communicating with the server using JSON. This JSON is transferred using the GraphQL API. GraphQL is a replacement to the old, good REST API.</p>\n<p>At some point of time, we come to a point, where current schema is just not providing us enough information. What to do in such cases? Keep calm and implement Magento 2 GraphQL resolver!</p>\n<h2 id=\"watch-the-tutorial\"><a href=\"#watch-the-tutorial\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Watch the tutorial</h2>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <div class=\"video\"> <iframe src=\"https://www.youtube.com/embed/RPE36f0xQRI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div> </div>\n<h2 id=\"general-rule\"><a href=\"#general-rule\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>General rule</h2>\n<p>Imagine having a normal Magento module. With some model, helpers.</p>\n<p>Start with creating a module called <code class=\"gatsby-code-text\">&lt;MODULE_NAME&gt;GraphQL</code>. Use an <a href=\"https://mage2gen.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">online generator</a> for that</p>\n<p>Next, define what would you like to expose! Now, define a schema in <code class=\"gatsby-code-text\">&lt;MODULE_ROOT&gt;/etc/schema.graphqls</code>. The general docs on doing that can be found on the <a href=\"https://graphql.org/learn/schema/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official GraphQL site</a>. But, there are few differences in Magento 2:</p>\n<ul>\n<li>The interface implementation does not require to implement all interface fields in the type</li>\n<li>The <code class=\"gatsby-code-text\">extend type</code> notation is not obligatory, but we recommend using it do distinguish between new and extended types</li>\n<li>The <a href=\"https://devdocs.magento.com/guides/v2.3/graphql/develop/create-graphqls-file.html#query-caching\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">query caching mechanism</a> is not utilized in ScandiPWA, we include all white-listed models which were loaded during the response preparation</li>\n<li>You can use directives like <code class=\"gatsby-code-text\">@resolver</code> and <code class=\"gatsby-code-text\">@doc</code> to connect resolvers and document the code quickly</li>\n</ul>\n<p>Time to implement the resolver! Connect it with you schema declaration using <code class=\"gatsby-code-text\">@resolver</code> directive in the schema. Provide a class in the following manner:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"28972195057701212000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Query {\n    serverTime: String @resolver(class: &quot;ScandiPWA\\\\ServerTime\\\\Model\\\\Resolver\\\\ServerTime&quot;) @doc(description: &quot;The current server time formatted in YYYY/MM/DD&quot;)\n}`, `28972195057701212000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphqls\"><pre class=\"gatsby-code-graphqls\"><code class=\"gatsby-code-graphqls\">type Query {\n    serverTime: String @resolver(class: &quot;ScandiPWA\\\\ServerTime\\\\Model\\\\Resolver\\\\ServerTime&quot;) @doc(description: &quot;The current server time formatted in YYYY/MM/DD&quot;)\n}</code></pre></div>\n<p>Awesome, now create the resolver class. This should be done in <code class=\"gatsby-code-text\">&lt;MODULE_ROOT&gt;/Model/Resolver/&lt;RESOLVER_NAME&gt;.php</code>. This should be a class, use following template:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"17137676760023335000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndeclare(strict_types=1);\n\nnamespace <VENDOR>\\<NAME>\\Model\\Resolver;\n\nuse Magento\\Framework\\GraphQl\\Config\\Element\\Field;\nuse Magento\\Framework\\GraphQl\\Query\\ResolverInterface;\nuse Magento\\Framework\\GraphQl\\Schema\\Type\\ResolveInfo;\n\n/**\n * @inheritdoc\n */\nclass <RESOLVER_NAME> implements ResolverInterface\n{\n    /**\n     * @inheritdoc\n     */\n    public function resolve(\n        Field \\$field,\n        \\$context,\n        ResolveInfo \\$info,\n        array \\$value = null,\n        array \\$args = null\n    ) {\n        // resolver functionality ...\n    }\n}`, `17137676760023335000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"gatsby-code-php\"><code class=\"gatsby-code-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */</span>\n<span class=\"token keyword\">declare</span><span class=\"token punctuation\">(</span>strict_types<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">VENDOR</span><span class=\"token operator\">></span>\\<span class=\"token operator\">&lt;</span><span class=\"token constant\">NAME</span><span class=\"token operator\">></span>\\<span class=\"token package\">Model<span class=\"token punctuation\">\\</span>Resolver</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Magento<span class=\"token punctuation\">\\</span>Framework<span class=\"token punctuation\">\\</span>GraphQl<span class=\"token punctuation\">\\</span>Config<span class=\"token punctuation\">\\</span>Element<span class=\"token punctuation\">\\</span>Field</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Magento<span class=\"token punctuation\">\\</span>Framework<span class=\"token punctuation\">\\</span>GraphQl<span class=\"token punctuation\">\\</span>Query<span class=\"token punctuation\">\\</span>ResolverInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Magento<span class=\"token punctuation\">\\</span>Framework<span class=\"token punctuation\">\\</span>GraphQl<span class=\"token punctuation\">\\</span>Schema<span class=\"token punctuation\">\\</span>Type<span class=\"token punctuation\">\\</span>ResolveInfo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @inheritdoc\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">RESOLVER_NAME</span><span class=\"token operator\">></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ResolverInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * @inheritdoc\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>\n        Field <span class=\"token variable\">$field</span><span class=\"token punctuation\">,</span>\n        <span class=\"token variable\">$context</span><span class=\"token punctuation\">,</span>\n        ResolveInfo <span class=\"token variable\">$info</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">array</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">array</span> <span class=\"token variable\">$args</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// resolver functionality ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<blockquote>\n<p><strong>Note</strong>:</p>\n<p>Do not write the complex business logic inside, just refer the original Models.</p>\n</blockquote>\n<h2 id=\"advanced-performance-optimization\"><a href=\"#advanced-performance-optimization\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Advanced performance optimization</h2>\n<p>The Magento, by default, has the <strong>Batch resolver interface</strong> - read more about these <a href=\"https://devdocs.magento.com/guides/v2.3/graphql/develop/resolvers.html#batchresolverinterface\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>. We are not utilizing them, we started long before they appeared. This is why we now have the <a href=\"https://github.com/scandipwa/performance\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">performance module</a>.</p>\n<blockquote>\n<p><strong>Note</strong>:</p>\n<p>We have not dug deep into the new Magento approach to the GraphQL performance issues (Batch resolver interface).</p>\n</blockquote>\n<p>Our solution (the performance package) was tested under the 500 RPS (Request Per Second) no cache load. The average response time for category page of 24 products - 0.5s. We can have not validated the performance of Magento resolvers after the <code class=\"gatsby-code-text\">2.3.4</code>. On <code class=\"gatsby-code-text\">2.3.3</code> it was not that great.</p>","frontmatter":{"title":"Creating the GraphQL resolver"},"fields":{"path":"content/docs/creating-resolver.md","slug":"/docs/creating-resolver.html"}}},"pageContext":{"slug":"/docs/creating-resolver.html"}},"staticQueryHashes":[]}