{"componentChunkName":"component---src-templates-docs-js","path":"/docs/connecting-resolver.html","result":{"data":{"markdownRemark":{"html":"<h2 id=\"watch-the-tutorial\"><a href=\"#watch-the-tutorial\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Watch the tutorial</h2>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <div class=\"video\"> <iframe src=\"https://www.youtube.com/embed/zoioI81yOWI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div> </div>\n<h2 id=\"a-step-by-step-algorithm-of-creating-a-query\"><a href=\"#a-step-by-step-algorithm-of-creating-a-query\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A step-by-step algorithm of creating a query</h2>\n<blockquote>\n<p><strong>TODO</strong>:</p>\n<p>Complete the guide with references to helpers used in the video</p>\n</blockquote>\n<p>ScandiPWA is provided with functionality that allows writing GraphQL queries quickly and easily. You will learn to implement a simple query.</p>\n<p>Imagine having a following GraphQL schema:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"48962465793345356000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Mutation {\n    sendMessage(input: SendMessageInput!): SendMessageOutput\n}\n\ninput SendMessageInput {\n    chat_id: String!\n    message_text: String!\n    message_image_id: String\n}\n\ntype SendMessageOutput {\n    success: Boolean\n    sent_message_info: SentMessageInformation\n}\n\ntype SentMessageInformation {\n    message_id: Int\n    sender_id: Int\n}`, `48962465793345356000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"gatsby-code-graphql\"><code class=\"gatsby-code-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Mutation</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attr-name\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> SendMessageInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> SendMessageOutput\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">input</span> SendMessageInput <span class=\"token punctuation\">{</span>\n    <span class=\"token attr-name\">chat_id</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n    <span class=\"token attr-name\">message_text</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n    <span class=\"token attr-name\">message_image_id</span><span class=\"token punctuation\">:</span> String\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SendMessageOutput</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attr-name\">success</span><span class=\"token punctuation\">:</span> Boolean\n    <span class=\"token attr-name\">sent_message_info</span><span class=\"token punctuation\">:</span> SentMessageInformation\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SentMessageInformation</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attr-name\">message_id</span><span class=\"token punctuation\">:</span> Int\n    <span class=\"token attr-name\">sender_id</span><span class=\"token punctuation\">:</span> Int\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>Create a file in <code class=\"gatsby-code-text\">src/app/query</code> folder. Call it <code class=\"gatsby-code-text\">&lt;FunctionalityPartName&gt;.query.js</code>.</li>\n<li>In there create a class called <code class=\"gatsby-code-text\">&lt;FunctionalityPartName&gt;Query</code>.</li>\n<li>\n<p>Implement query retrieval functionality. Do not forget to add export to the <code class=\"gatsby-code-text\">src/query/index.js</code> file.</p>\n<blockquote>\n<p><strong>Note</strong>:</p>\n<p>ScandiPWA provides <code class=\"gatsby-code-text\">Field</code> class as a helper to write GraphQL queries. It is strongly recommended to stick to it as to the only possible way of query implementation</p>\n</blockquote>\n</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"42237908900031630000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`// Chat.query.js\nimport { Field } from 'Util/Query';\n\nexport class ChatQuery {\n    // The query itself\n    sendMessage(input) {\n        return new Field('sendMessage')\n            // Set query's arguments\n            .addArgument('input', 'SendMessageInput!', input)\n            // Add fields to query (Field instance)\n            .addFieldList(this._getSendMessageFields());\n    }\n\n    // Option 1: setting fields with addFieldList from array\n    _getSendMessageFields() {\n        return [\n            'success',\n            this._getSentMessageInfoField()\n        ];\n    }\n\n    // Option 2: setting each field manually\n    _getSentMessageInfoField() {\n        return new Field('sent_message_info')\n            .addField('message_id')\n            .addField('sender_id');\n    }\n}\n\nexport default new ChatQuery();`, `42237908900031630000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// Chat.query.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Field <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'Util/Query'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChatQuery</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The query itself</span>\n    <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Field</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sendMessage'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// Set query's arguments</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">addArgument</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'SendMessageInput!'</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// Add fields to query (Field instance)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">addFieldList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_getSendMessageFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Option 1: setting fields with addFieldList from array</span>\n    <span class=\"token function\">_getSendMessageFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">'success'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_getSentMessageInfoField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Option 2: setting each field manually</span>\n    <span class=\"token function\">_getSentMessageInfoField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Field</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sent_message_info'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">addField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message_id'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">addField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sender_id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChatQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"4\">\n<li>Use the query!</li>\n</ol>\n<p>Natural question should arise at this point: what does <code class=\"gatsby-code-text\">input</code> contain?</p>\n<p>Answer is pretty trivial. It is a simple JS object, which has exactly the same structure as defined in <code class=\"gatsby-code-text\">SendRmaMessageInput</code> type in the schema. This case it should be the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"55673725902919120000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n    chat_id: '1BC2',\n    message_text: 'My awesome chat API works perfectly fine!',\n    message_image_id: '5DF1' // Optional because in input type it is defined as optional\n}`, `55673725902919120000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token punctuation\">{</span>\n    chat_id<span class=\"token operator\">:</span> <span class=\"token string\">'1BC2'</span><span class=\"token punctuation\">,</span>\n    message_text<span class=\"token operator\">:</span> <span class=\"token string\">'My awesome chat API works perfectly fine!'</span><span class=\"token punctuation\">,</span>\n    message_image_id<span class=\"token operator\">:</span> <span class=\"token string\">'5DF1'</span> <span class=\"token comment\">// Optional because in input type it is defined as optional</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Generally, there are two options how data can be fetched in ScandiPWA: through Service Worker (in most cases you want to use this option) or around it.</p>\n<p>To use SW you need to create a dispatcher in <code class=\"gatsby-code-text\">src/app/store/&lt;FunctionalityPartName&gt;</code> that inherits from <code class=\"gatsby-code-text\">QueryDispatcher</code>, as follows:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"26365299609084203000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`import { QueryDispatcher } from 'Util/Request';\nimport { ONE_MONTH_IN_SECONDS } from 'Util/Request/QueryDispatcher';\nimport { SomeQuery } from 'Query';\n\nexport class SomeDispatcher extends QueryDispatcher {\n    constructor() {\n        /**\n            About super(name, cacheTTL) - QueryDispatcher constructor\n            @param name — Name of model for ServiceWorker to send BroadCasts updates to\n            @param cacheTTL — Cache TTL (in seconds) for ServiceWorker to cache responses\n        */\n        super('Some', ONE_MONTH_IN_SECONDS);\n    }\n\n    onSuccess(options, dispatch) {\n        // Dispatch action with new data\n    }\n\n    onError(error, dispatch) {\n        // Handle error\n    }\n\n    prepareRequest(options) {\n        return [\n            SomeQuery.getQuery(options)\n        ];\n    }\n}\n\nexport default new SomeDispatcher();`, `26365299609084203000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> QueryDispatcher <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'Util/Request'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">ONE_MONTH_IN_SECONDS</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'Util/Request/QueryDispatcher'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SomeQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'Query'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeDispatcher</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">QueryDispatcher</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n            About super(name, cacheTTL) - QueryDispatcher constructor\n            @param name — Name of model for ServiceWorker to send BroadCasts updates to\n            @param cacheTTL — Cache TTL (in seconds) for ServiceWorker to cache responses\n        */</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Some'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ONE_MONTH_IN_SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options<span class=\"token punctuation\">,</span> dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Dispatch action with new data</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Handle error</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">prepareRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n            SomeQuery<span class=\"token punctuation\">.</span><span class=\"token function\">getQuery</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To ignore SW functionality functions <code class=\"gatsby-code-text\">fetchQuery</code> and <code class=\"gatsby-code-text\">fetchMutation</code> can be used as in example below. Simple promise-based workflow.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"70484906133796960000\"\n              data-toaster-class=\"gatsby-code-button-toaster customToasterClass\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text customToasterTextClass\"\n              data-toaster-text=\"Copied\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`import { SomeQuery } from 'Query';\nimport { fetchQuery } from 'Util/Request';\n\n//...\n\nfetchQuery(SomeQuery.getQuery(options))\n    .then((result) => {\n        // handle result\n    })\n    .catch((err) => {\n        // handle error\n    })`, `70484906133796960000`)\"\n            >\n              <div\n                class=\"gatsby-code-button customButtonClass\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SomeQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'Query'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fetchQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'Util/Request'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//...</span>\n\n<span class=\"token function\">fetchQuery</span><span class=\"token punctuation\">(</span>SomeQuery<span class=\"token punctuation\">.</span><span class=\"token function\">getQuery</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// handle result</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// handle error</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Connecting to the GraphQL resolver"},"fields":{"path":"content/docs/connecting-resolver.md","slug":"/docs/connecting-resolver.html"}}},"pageContext":{"slug":"/docs/connecting-resolver.html"}},"staticQueryHashes":[]}